name: CI

on:
  push:
    branches: [ CI ]

jobs:
  publish:
    name: Build, pack and publish Nuget package
    environment: Nuget
    runs-on: ubuntu-latest
    steps:
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.11
        with:
          versionSpec: '5.x'
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Determine version
        uses: gittools/actions/gitversion/execute@v0.9.11
        id: gitversion

      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.x

      - name: Restore dependencies
        run: |
            cd src
            dotnet restore
      - name: Build
        run: |
            cd src
            dotnet build --no-restore --configuration Release /p:UseSharedCompilation=false 
      - name: Pack
        run: dotnet pack --include-symbols -p:SymbolPackageFormat=snupkg -p:PackageVersion=${{ env.GITVERSION_NUGETVERSION }} --no-build -c Release src/Lightstone.Products/Lightstone.Products.csproj -o "../output/nuget"

      # Publish
      - name: Publish Nuget prerelease package
        id: publish_nuget
        run: dotnet nuget push ../output/nuget/*.nupkg -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_KEY}} --skip-duplicate -n 1
